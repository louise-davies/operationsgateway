diff --git a/internals/hooks/useField/useField.js b/internals/hooks/useField/useField.js
index 80ecc4a95dc399f2b51fd413a1d8e4e93a02a35a..303a4466124b2abfc165a99a5cee137040e7e1e2 100644
--- a/internals/hooks/useField/useField.js
+++ b/internals/hooks/useField/useField.js
@@ -340,7 +340,7 @@ export const useField = params => {
       // On multi input range pickers we want to update selection range only for the active input
       // This helps to avoid the focus jumping on Safari https://github.com/mui/mui-x/issues/9003
       // because WebKit implements the `setSelectionRange` based on the spec: https://bugs.webkit.org/show_bug.cgi?id=224425
-      if (inputRef.current === getActiveElement(document)) {
+      if (inputRef.current === getActiveElement(inputRef.current.ownerDocument)) {
         inputRef.current.setSelectionRange(selectionStart, selectionEnd);
       }
       // Even reading this variable seems to do the trick, but also setting it just to make use of it
@@ -367,7 +367,7 @@ export const useField = params => {
 
   React.useEffect(() => {
     // Select the right section when focused on mount (`autoFocus = true` on the input)
-    if (inputRef.current && inputRef.current === document.activeElement) {
+    if (inputRef.current && inputRef.current === inputRef.current.ownerDocument.activeElement) {
       setSelectedSections('all');
     }
     return () => window.clearTimeout(focusTimeoutRef.current);
@@ -397,7 +397,7 @@ export const useField = params => {
     }
     return 'numeric';
   }, [selectedSectionIndexes, state.sections]);
-  const inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);
+  const inputHasFocus = inputRef.current && inputRef.current === getActiveElement(inputRef.current.ownerDocument);
   const areAllSectionsEmpty = valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);
   const shouldShowPlaceholder = !inputHasFocus && areAllSectionsEmpty;
   React.useImperativeHandle(unstableFieldRef, () => ({
