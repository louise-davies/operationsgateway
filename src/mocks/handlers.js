import { rest } from 'msw';
import recordsJson from './records.json';
import channelsJson from './channels.json';

export const handlers = [
  rest.post('/login', (req, res, ctx) => {
    return res(
      ctx.status(200),
      ctx.json(
        // random JWT generated by jwt.io
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwidXNlcm5hbWUiOiJKb2huIERvZSIsImlhdCI6MTUxNjIzOTAyMn0.p5Csu2THYW5zJys2CWdbGM8GaWjpY6lOQpdLoP4D7V4'
      )
    );
  }),
  rest.get('/channels', (req, res, ctx) => {
    return res(ctx.status(200), ctx.json(channelsJson));
  }),
  rest.get('/records', (req, res, ctx) => {
    return res(ctx.status(200), ctx.json(recordsJson));
  }),
  rest.get('/records/count', (req, res, ctx) => {
    return res(ctx.status(200), ctx.json(recordsJson.length));
  }),
  rest.get('/channels/summary/:channelName', (req, res, ctx) => {
    const { channelName } = req.params;
    const scalar = channelsJson.channels[channelName].type === 'scalar';
    return res(
      ctx.status(200),
      ctx.json({
        first_date: '2022-01-29T00:00:00',
        most_recent_date: '2023-01-31T00:00:00',
        recent_sample: scalar
          ? [
              { '2022-01-31T00:00:00': 6 },
              { '2022-01-30T00:00:00': 5 },
              { '2022-01-29T00:00:00': 4 },
            ]
          : [
              {
                '2022-01-31T00:00:00': recordsJson.find(
                  (record) => channelName in record.channels
                ).channels[channelName].thumbnail,
              },
              {
                '2022-01-30T00:00:00': recordsJson.find(
                  (record) => channelName in record.channels
                ).channels[channelName].thumbnail,
              },
              {
                '2022-01-29T00:00:00': recordsJson.find(
                  (record) => channelName in record.channels
                ).channels[channelName].thumbnail,
              },
            ],
      })
    );
  }),
];
