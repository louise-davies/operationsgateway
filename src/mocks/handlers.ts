import { rest } from 'msw';
import recordsJson from './records.json';
import channelsJson from './channels.json';
import experimentsJson from './experiments.json';
import { Channel, isChannelScalar, Record } from '../app.types';

// have to add undefined here due to how TS JSON parsing works
type RecordsJSONType = (Omit<Record, 'channels'> & {
  channels: {
    [channel: string]: Channel | undefined;
  };
})[];

export const handlers = [
  rest.post('/login', (req, res, ctx) => {
    return res(
      ctx.status(200),
      ctx.json(
        // random JWT generated by jwt.io
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwidXNlcm5hbWUiOiJKb2huIERvZSIsImlhdCI6MTUxNjIzOTAyMn0.p5Csu2THYW5zJys2CWdbGM8GaWjpY6lOQpdLoP4D7V4'
      )
    );
  }),
  rest.get('/channels', (req, res, ctx) => {
    return res(ctx.status(200), ctx.json(channelsJson));
  }),
  rest.get('/experiments', (req, res, ctx) => {
    return res(ctx.status(200), ctx.json(experimentsJson));
  }),
  rest.get('/records', (req, res, ctx) => {
    return res(ctx.status(200), ctx.json(recordsJson));
  }),
  rest.get('/records/count', (req, res, ctx) => {
    return res(ctx.status(200), ctx.json(recordsJson.length));
  }),
  rest.get('/channels/summary/:channelName', (req, res, ctx) => {
    const { channelName } = req.params;
    let channel;
    if (typeof channelName === 'string') {
      channel = (recordsJson as RecordsJSONType).find(
        (record) => channelName in record.channels
      )?.channels[channelName];
    }
    if (channel) {
      return res(
        ctx.status(200),
        ctx.json({
          first_date: '2022-01-29T00:00:00',
          most_recent_date: '2023-01-31T00:00:00',
          recent_sample: isChannelScalar(channel)
            ? [
                { '2022-01-31T00:00:00': 6 },
                { '2022-01-30T00:00:00': 5 },
                { '2022-01-29T00:00:00': 4 },
              ]
            : [
                {
                  '2022-01-31T00:00:00': channel?.thumbnail,
                },
                {
                  '2022-01-30T00:00:00': channel?.thumbnail,
                },
                {
                  '2022-01-29T00:00:00': channel?.thumbnail,
                },
              ],
        })
      );
    }
  }),
  rest.get('/waveforms/:recordId/:channelName', (req, res, ctx) => {
    return res(
      ctx.status(200),
      ctx.json({
        _id: '1',
        x: '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]',
        y: '[2, 10, 8, 7, 1, 4, 5, 3, 6, 9]',
      })
    );
  }),
  rest.get('/images/colourmap_names', (req, res, ctx) => {
    return res(
      ctx.status(200),

      ctx.json({
        main: [
          'colourmap_1',
          'colourmap_1_r',
          'colourmap_2',
          'colourmap_2_r',
          'colourmap_3',
          'colourmap_3_r',
          'colourmap_4',
          'colourmap_4_r',
        ],
        extended: [
          'colourmap_5',
          'colourmap_5_r',
          'colourmap_6',
          'colourmap_6_r',
          'colourmap_7',
          'colourmap_7_r',
          'colourmap_8',
          'colourmap_8_r',
          'colourmap_9',
          'colourmap_9_r',
          'colourmap_10',
          'colourmap_11',
          'colourmap_12',
        ],
      })
    );
  }),
];
